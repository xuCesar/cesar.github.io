<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.xusz.cn/</id>
    <title>@你坑到我了</title>
    <updated>2020-04-28T15:39:47.270Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.xusz.cn/"/>
    <link rel="self" href="https://blog.xusz.cn/atom.xml"/>
    <subtitle>记录生活，学习以及碎碎念...</subtitle>
    <logo>https://blog.xusz.cn/images/avatar.png</logo>
    <icon>https://blog.xusz.cn/favicon.ico</icon>
    <rights>All rights reserved 2020, @你坑到我了</rights>
    <entry>
        <title type="html"><![CDATA[小程序学习摘抄笔记]]></title>
        <id>https://blog.xusz.cn/xiao-cheng-xu/</id>
        <link href="https://blog.xusz.cn/xiao-cheng-xu/">
        </link>
        <updated>2020-04-26T09:08:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="启动流程">启动流程</h3>
<ol>
<li>下载小程序代码包<br>
微信客户端打开小程序前，会把整个小程序包下载到本地。</li>
<li>渲染小程序首页<br>
微信客户端通过<code>app.json</code>的<code>pages</code>字段抓取小程序的所有页面。通过小程序的底层机制，微信客户端装载并渲染出首页。</li>
<li>执行onLaunch回调<br>
小程序启动后，在<code>app.js</code>中定义的<code>App</code>实例的 <code>onLaunch</code> 回调会被执行。整个小程序只有一个App实例，全局共享。</li>
<li>界面生成<br>
微信客户顿根据页面的<code>.json</code>配置文件生成一个界面。顶部的文字和颜色可以子该文件定义。</li>
<li>装载页面结构，样式<br>
微信客户端加载<code>.wxml</code>文件，生成页面结构；加载<code>.wxss</code>文件，显示页面结构。</li>
<li>渲染生成页面<br>
微信客户端装载<code>.js</code>文件，根据构造器生成页面。在生成页面的时候，小程序会把<code>Page</code>里的<code>data</code>结合<code>.wxml</code>文件一起渲染出最终的页面。</li>
<li>执行onLoad回调<br>
页面渲染完成后，页面实例（<code>Page</code>）会收到一个<code>onLoad</code>回调，可以在这里处理一些业务逻辑。</li>
</ol>
<p><strong>冷启动</strong><br>
首次打开小程序或者小程序被微信销毁后再次打开小程序的情况，此时小程序需要重新加载启动。</p>
<p><strong>热启动</strong><br>
已经打开过小程序，在一定时间内再次打开小程序，无序重新启动，只需将后台态的小程序切换到前台。</p>
<p><strong>运行机制</strong></p>
<ul>
<li>小程序没有重启的概念。</li>
<li>小程序进入后台态，微信会维持一段时间的运行状态（目前是5分钟），超过时间会被微信主动销毁。</li>
<li>微信客户端5s内收到两次以上的系统内存警告，微信会销毁小程序</li>
</ul>
<h3 id="技术模型">技术模型</h3>
<p>小程序的渲染层和逻辑层运行在不同的线程中，和传统的web单线程模型有很大差异，同时也多了一些限制。</p>
<p>小程序的架构设计要求必须要快，加载快，渲染快等。</p>
<p>一般页面渲染的技术主要有三种：</p>
<ol>
<li>原生渲染</li>
<li>WEB渲染</li>
<li>原生与WEB混合渲染（Hybird）</li>
</ol>
<p>小程序的宿主环境是为微信，不可能采用原生渲染，违背了小程序的设计理念。如果纯web渲染，可能会面临复杂交互带来的性能问题，因为web是单线程的，UI渲染和JS脚本执行都在同一个线程下，脚本的执行势必占用资源，从而会对UI渲染产生影响。</p>
<p>小程序的选择就是结合两种技术，以一种混合的方式。</p>
<p><code>界面</code>由WEB技术渲染，有Native提供丰富接口，获取原生能力。同时，每个页面都是由不同的WebView渲染，以提供更好的，贴近原生的交互体验，也避免了单个WebView的任务过于繁重。为了统一体验，小程序提供了一套<code>内置组件</code>，和一些基础、通用的能力以降低开发门槛。有一部分较为复杂的内置组件采用Native渲染，从而获取更好的性能。</p>
<h3 id="面临的风险">面临的风险</h3>
<p>Web技术的繁荣得益于它的灵活和开放，开发者可以使用Web技术实现各种功能和创意。但这些功能创意在微信环境下则是不被允许的或者以特定的规则接受管控的。</p>
<p>为了解决管控和安全问题，小程序必须阻止开发者使用一些浏览器提供的，如页面跳转，DOM操作、动态脚本执行等开放性接口。为了完全避免可能存在的风险，小程序提供了一个<code>沙箱</code>环境来运行开发者的JavaScript代码。</p>
<h3 id="双线程的由来">双线程的由来</h3>
<p>小程序的<code>沙箱</code>环境不支持任何浏览器相关的接口，只有纯JS的解释执行环境。像HTML5中的<code>ServiceWorker</code>、<code>WebWorker</code>特性就比较符合这样的条件。但这两者都是启用另一个线程来执行JS。考虑到小程序是多WebView架构，每个页面由不同的WebView渲染显示，在这个架构下不好去用某个WebView中的<code>ServiceWorker</code>去管理所有的页面。</p>
<p>得益于客户端都有JS解释引擎（IOS下是内置的<code>JavaScriptCore框架</code>，安卓则是腾讯x5内核提供的<code>JsCore</code>环境），小程序可以创建一个单独的线程去执行JS，这个线程下执行的都是有关小程序业务逻辑代码，也就是小程序的逻辑层。而界面相关的任务全部都在WebView线程里执行。通过逻辑层与渲染层之间的交互，完成页面乃至小程序的运行及渲染。这就是小程序双线程模型的由来。</p>
<table>
<thead>
<tr>
<th>运行环境</th>
<th>逻辑层</th>
<th>渲染层</th>
</tr>
</thead>
<tbody>
<tr>
<td>IOS</td>
<td>JavaScriptCore</td>
<td>WKWebView</td>
</tr>
<tr>
<td>Android</td>
<td>JsCore</td>
<td>X5浏览器</td>
</tr>
<tr>
<td>小程序开发者工具</td>
<td>NWJS</td>
<td>Chrome WebView</td>
</tr>
</tbody>
</table>
<h3 id="双线程带来的异步">双线程带来的异步</h3>
<p>线程之间通信是需要时间的，所以小程序架构里充斥着异步。除了两个线程之间的异步通信，线程与Native之间的交互同样是异步的。</p>
<h3 id="小程序与客户端通信原理">小程序与客户端通信原理</h3>
<h4 id="视图层组件">视图层组件</h4>
<p>内置组件有部分组件（原生组件）是利用Native提供的能力，这就会涉及到视图层与Native的交互通信。这层通信机制在IOS和安卓系统的实现方式不一样。</p>
<ul>
<li>IOS：利用<code>WKWebView</code>提供的<code>messageHandlers</code>特性</li>
<li>安卓：向<code>WebView</code>的<code>window</code>对象注入一个原生方法，最终会封装成<code>WeiXinJSBridge</code>这样一个兼容层，主要提供了调用（<code>invoke</code>）和监听（<code>on</code>）这两种方法。</li>
</ul>
<h4 id="逻辑层接口">逻辑层接口</h4>
<p>逻辑层与客户端原生通信机制与渲染层类似，不同之处在于，IOS可以往<code>JavaScriptCore</code>框架中注入一个全局的原生方法，而安卓则跟渲染层保持一致。开发者通常只是间接的调用与原生客户端通信的底层接口，小程序方面会对逻辑层接口进行封装，然后暴露给开发者，封装的细节可能是统一入参、做些参数校验、兼容各平台或版本问题等。</p>
<h3 id="通信流程图">通信流程图</h3>
<figure data-type="image" tabindex="1"><img src="http://assets.51xzxz.com/images/WechatIMG2207.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="http://assets.51xzxz.com/images/WechatIMG2208.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[刻意练习阅读随笔]]></title>
        <id>https://blog.xusz.cn/du-ke-yi-lian-xi/</id>
        <link href="https://blog.xusz.cn/du-ke-yi-lian-xi/">
        </link>
        <updated>2020-04-18T05:33:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="长时工作记忆">长时工作记忆</h3>
<p>一种记忆能力，是刻意练习的指向和本质。</p>
<h3 id="如何培养长时工作记忆">如何培养长时工作记忆？</h3>
<p>选择合适的难度，重复练习，调整错误，重复练习。</p>
<p><strong>赋予意义，精准编码</strong><br>
了解、熟悉领域内的名词、术语，存储信息时，有意识的采取<code>元认知</code>的各项加工策略</p>
<p><strong>提取结构或者模式</strong><br>
提取专业领域内的结构或者模式，以更好（系统）的方式存储</p>
<p><strong>加快速度，增加连接</strong><br>
大量的重复的刻意练习，增加长时记忆与工作记忆的连接</p>
<pre><code>元认知：对自我认知的再认知和调控的能力。
</code></pre>
<h3 id="认知差异">认知差异</h3>
<p>对实体的认知差异对最终的结果有着相当大的影响。就像盖房子，直接平底而起的房子显然存在质量风险，而考虑过抗震，抗风等诸多因素，因地制宜的从地基开始修筑的房子显然更加的可靠。</p>
<blockquote>
<p>认知复杂度：是指构建客观世界的能力，认知复杂度高的人具有高度思维华的能力，更善于使用互补或者互斥的概念来理解客观世界。</p>
</blockquote>
<h3 id="隐性知识">隐性知识</h3>
<p>隐性知识是指那些无法通过直接的书本学习或教授的而获得的知识。隐性知识需要在情境中去获取，在哪里用，就从哪里学。从情境出发，成为一名认知学徒开始，相比于独自学习更加高效。</p>
<ul>
<li>找到学习共同体</li>
<li>隐性知识显性化</li>
<li>模仿榜样</li>
<li>培养多样性</li>
</ul>
<blockquote>
<p>没有简单的模型通向伟大 —— 比尔·盖茨</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Axios 还是 fetch -- 你该如何选择？]]></title>
        <id>https://blog.xusz.cn/axios-huan-shi-fetch-ni-gai-ru-he-xuan-ze/</id>
        <link href="https://blog.xusz.cn/axios-huan-shi-fetch-ni-gai-ru-he-xuan-ze/">
        </link>
        <updated>2019-09-21T13:25:10.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文译自<a href="https://blog.logrocket.com/axios-or-fetch-api/">Axios or fetch(): Which should you use?</a>，原作者为<a href="https://blog.logrocket.com/author/farazkelhini/">Faraz Kelhini</a>，如有不妥之处，还请指正。</p>
</blockquote>
<p>Axios是一个优秀的HTTP解决方案，能够满足我们日常开发所需。但它不是我们唯一的选择，不同的场景下，或许我们可以尝试更多的选择。</p>
<p>毫无疑问，一些开发者选择Axios是因为它友好且易用的API。但是很多时候，我们的使用场景可能没有那么复杂。而Fetch API就是一个可选项，它已经作为现代浏览器中异步网络请求的标准方法，它提供了一个全局方法<code>fetch()</code>，拥有与Axios类似的功能特性。</p>
<p>在这篇文章中，我们会对比fetch()和Axios，了解它们在不同场景下的执行差异。希望通过本篇文章，会有助于你对它们的理解。</p>
<h3 id="基本语法">基本语法</h3>
<p>在深入了解Axios的高级功能之前，我们先对比一下它们的基本语法。下面是使用Axios向网络地址发送一个带有自定义请求头的请求。Axios能够自动的将数据转换为JSON格式，所以你不用手动操作。</p>
<pre><code>const options = {
 url: 'http://localhost/test.html',
 method: 'POST',
 headers: {
  'Accept': 'application/json',
	'Content-Type': 'application/json;charset=UTF-8'
 },
 data: {
  a: 10,
	b: 20
 }
};

axios(options)
 .then(res =&gt; {
  console.log(res.status)
 })
</code></pre>
<p>现在使用<code>fetch()</code>实现相同逻辑：</p>
<pre><code>const url = 'http://localhost/test/html';
const options = {
 method: 'POST',
 headers: {
  'Accept': 'application/json',
	'Content-Type': 'application/json;charset=UTF-8'
 },
 body: JSON.stringify({
  a: 10,
	b: 20
 })
};

fetch(url, optios)
	.then(res =&gt; {
	 consle.log(res.status)
	})
</code></pre>
<p>可以看到：</p>
<ul>
<li>使用Axios发送的数据放在data对象内，<code>fetch()</code>则是作为body属性的值</li>
<li>使用<code>fetch()</code>发送的数据需要显示的转换为字符串</li>
<li>使用Axios，请求地址在其接收的对象参数内，<code>fetch()</code>则需要将请求地址单独传递</li>
</ul>
<h3 id="向下兼容">向下兼容</h3>
<p>在兼容性上，大多数浏览器支持Axios，包括IE11。<code>fetch()</code>则仅支持Chrome 42+、Firefox 39+、Edge 14+和Safari 10.1+。更多兼容信息可以浏览<a href="https://caniuse.com/#search=Fetch">Can I Use</a>。</p>
<p>如果你是因为需要向下兼容才使用Axios的，那么你可能并不需要使用它。相反，<code>fetch()</code>和类似的<code>polyfill</code>能够在不支持<code>fetch()</code>的浏览器上实现类似的功能。你可以使用<code>npm</code>或者<code>yarn</code>来安装fetch polyfill：</p>
<pre><code>//install 
npm install whatwg-fetch --save

// or yarn
yarn add whatwg-fetch

// import
import 'whatwg-fetch'
window.fetch(...)
</code></pre>
<p>在一些旧浏览器中，你可能还需要引入promise polyfill，因为这些旧浏览器可能不支持promise。</p>
<h3 id="响应超时">响应超时</h3>
<p>相较于<code>fetch()</code>，Axios简易的超时配置可能是受一些开发者青睐的原因之一。在Axios中，你可以使用config对象的可选属性来设置请求的超时时间。例如：</p>
<pre><code>axios({
 method: 'POST',
 url: '/login',
 timout: 4000,
 data: {
  firstName: 'David',
	lastName: 'Pollock'
 }
})
.then(res =&gt; { /* some code */ })
.catch(error =&gt; console.log('timeout exceeded'))
</code></pre>
<p>而<code>fetch()</code>则通过<code>AbortController</code>接口来提供类似的功能。不过，它比Axios要复杂一些：</p>
<pre><code>const controller = new AbortController();
cosnt options = {
 method: 'POST',
 signal: controller.signal,
 body: JSON.stringify({
  firstName: 'David',
	lastName: 'Pollock'
 })
};

const promise = fetch('/login', options);
const timeoutId = setTimeout(() =&gt; controller.abort(), 4000);

promise
 .then(res =&gt; { /* some code */ })
 .catch(error =&gt; console.log('timeout exceeded'))
</code></pre>
<p>上面的代码里，我们new了一个<code>AbortController</code>对象实例。<code>AbortController()</code>构造函数允许中止请求。<code>signal</code>是<code>AbortController</code>的一个只读属性，返回一个<code>AbortSignal</code>对象实例，它提供了请求通信或者请求中止的能力。如果服务器在4秒内没有响应，将执行<code>controller.abort()</code>，请求操作会被中止。</p>
<h3 id="自动json数据转换">自动JSON数据转换</h3>
<p>前面说过，Axios在发送请求时会自动将数据转换为字符串，你也可以覆盖默认行为并定义不同的转换机制。但是，当使用<code>fetch()</code>时，我们必须手动转换。比如</p>
<pre><code>// axios
axios.get('https://api.github.com/orgs/axios')
  .then(res =&gt; {
    console.log(res.data);
  }, error =&gt; {
    console.log(error);
  });

// fetch()
fetch('https://api.github.com/orgs/axios')
  .then(res =&gt; res.json()) 
  .then(data =&gt; {
    console.log(data) 
  })
  .catch(error =&gt; console.error(error));
</code></pre>
<p>数据的自动转换是一个很好的特性，但<code>fetch()</code>目前还没有这样的能力。</p>
<h3 id="拦截器">拦截器</h3>
<p>拦截器是Axios的一个很棒的特性，它能够拦截HTTP请求和响应，以便于我们对其进行序列化等的批量操作，而不用为每个请求编写单独的代码。</p>
<pre><code>axios.interceptors.request.use(config =&gt; {
  // 请求发送前的操作
  console.log('Request was sent');

  return config;
});

// 发送一个get请求
axios.get('https://api.github.com/users/sideshowbarker')
  .then(res =&gt; {
    console.log(res.data);
  });
</code></pre>
<p>在这段代码中，使用<code>axios.interceptor.request.use()</code>在请求发送前对HTTP进行统一处理。</p>
<p>默认情况下，<code>fetch()</code>不提供拦截请求的方法，但是想出一个变通办法并不难。你可以覆盖全局获取方法并定义自己的拦截器，如下所示:</p>
<pre><code>fetch = (originalFetch =&gt; {
  return (...arguments) =&gt; {
    const result = originalFetch.apply(this, arguments);
      return result.then(console.log('Request was sent'));
  };
})(fetch);

fetch('https://api.github.com/orgs/axios')
  .then(res =&gt; res.json())
  .then(data =&gt; {
    console.log(data) 
  });
</code></pre>
<h3 id="下载进度">下载进度</h3>
<p>进度指示器在加载大型资源时非常有用，尤其是在网速较慢的情况下。以前，JavaScript程序员使用<code>XMLHttpRequest.onprogress</code>回调处理程序来实现进度指示器。</p>
<p><code>Fetch API</code>没有提供进度处理程序。它是通过响应对象的<code>body</code>属性提供<code>ReadableStream</code>的实例。</p>
<p>下面的示例说明了在图像下载过程中使用<code>ReadableStream</code>向用户提供即时反馈:</p>
<pre><code>// original code: https://github.com/AnthumChris/fetch-progress-indicators

&lt;div id=&quot;progress&quot; src=&quot;&quot;&gt;progress&lt;/div&gt;
&lt;img id=&quot;img&quot;&gt;

&lt;script&gt;

'use strict'

const element = document.getElementById('progress');

fetch('https://fetch-progress.anthum.com/30kbps/images/sunrise-baseline.jpg')
  .then(response =&gt; {

    if (!response.ok) {
      throw Error(response.status+' '+response.statusText)
    }

    // ensure ReadableStream is supported
    if (!response.body) {
      throw Error('ReadableStream not yet supported in this browser.')
    }

    // store the size of the entity-body, in bytes
    const contentLength = response.headers.get('content-length');

    // ensure contentLength is available
    if (!contentLength) {
      throw Error('Content-Length response header unavailable');
    }

    // parse the integer into a base-10 number
    const total = parseInt(contentLength, 10);

    let loaded = 0;

    return new Response(

      // create and return a readable stream
      new ReadableStream({
        start(controller) {
          const reader = response.body.getReader();

          read();
          function read() {
            reader.read().then(({done, value}) =&gt; {
              if (done) {
                controller.close();
                return; 
              }
              loaded += value.byteLength;
              progress({loaded, total})
              controller.enqueue(value);
              read();
            }).catch(error =&gt; {
              console.error(error);
              controller.error(error)                  
            })
          }
        }
      })
    );
  })
  .then(res =&gt; 
    // construct a blob from the data
    res.blob()
  )
  .then(data =&gt; {
    // insert the downloaded image into the page
    document.getElementById('img').src = URL.createObjectURL(data);
  })
  .catch(error =&gt; {
    console.error(error);
  })

function progress({loaded, total}) {
  element.innerHTML = Math.round(loaded/total*100)+'%';
}

&lt;/script&gt;
</code></pre>
<p>在Axios中实现进度指示器更简单，尤其是如果你使用Axios进度条模块。首先，你需要包括以下样式和脚本:</p>
<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.rawgit.com/rikmms/progress-bar-4-axios/0a3acf92/dist/nprogress.css&quot; /&gt;

&lt;script src=&quot;https://cdn.rawgit.com/rikmms/progress-bar-4-axios/0a3acf92/dist/index.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>然后你可以像这样实现进度条:</p>
<pre><code>&lt;img id=&quot;img&quot;&gt;

&lt;script&gt;

loadProgressBar();

const url = 'https://fetch-progress.anthum.com/30kbps/images/sunrise-baseline.jpg';

function downloadFile(url) {
  axios.get(url, {responseType: 'blob'})
    .then(response =&gt; {
      const reader = new window.FileReader();
      reader.readAsDataURL(response.data); 
      reader.onload = () =&gt; {
        document.getElementById('img').setAttribute('src', reader.result);
      }
    })
    .catch(error =&gt; {
      console.log(error)
    });
}

downloadFile(url);

&lt;/script&gt;
</code></pre>
<p>这段代码使用<code>FileReader</code>异步读取下载的图像。<code>readAsDataURL</code>方法将图像数据作为Base64编码的字符串返回，然后将其插入img标记的src属性中以显示图像。</p>
<h3 id="并发请求">并发请求</h3>
<p>Axios提供<code>axios.all()</code>方法供开发者处理同时发出多个请求。只需将请求数组传递给此方法，然后使用<code>axios.spread()</code>将响应数组的属性分配给单独的变量:</p>
<pre><code>axios.all([
  axios.get('https://api.github.com/users/iliakan'), 
  axios.get('https://api.github.com/users/taylorotwell')
])
.then(axios.spread((obj1, obj2) =&gt; {
  // Both requests are now complete
  console.log(obj1.data.login + ' has ' + obj1.data.public_repos + ' public repos on GitHub');
  console.log(obj2.data.login + ' has ' + obj2.data.public_repos + ' public repos on GitHub');
}));
</code></pre>
<p>通过使用内置的<code>Promise.all()</code>方法，你可以获得相同的结果。将所有提取请求作为数组传递给<code>Promise.all()</code>。接下来，使用异步函数处理响应，如下所示:</p>
<pre><code>Promise.all([
  fetch('https://api.github.com/users/iliakan'),
  fetch('https://api.github.com/users/taylorotwell')
])
.then(async([res1, res2]) =&gt; {
  const a = await res1.json();
  const b = await res2.json();
  console.log(a.login + ' has ' + a.public_repos + ' public repos on GitHub');
  console.log(b.login + ' has ' + b.public_repos + ' public repos on GitHub');
})
.catch(error =&gt; {
  console.log(error);
});
</code></pre>
<h3 id="总结">总结</h3>
<p>Axios是一个轻量易用的HTTP解决方案，可以满足开发者大多数的网络通信需求。然而，如果你更喜欢使用本机APIs，那么你可以发挥自己的编程能力实现类Axios的特性。</p>
<p>如本文所讨论的，使用浏览器自带的<code>fetch()</code>方法完全有可能再现Axios库的关键特性。最终，是否值得加载一个客户端的超文本传输协议应用程序接口取决于你是否愿意使用内置的应用程序接口。</p>
<p>以上</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浏览器工作原理学习]]></title>
        <id>https://blog.xusz.cn/liu-lan-qi-gong-zuo-yuan-li-yu-shi-xian-xue-xi/</id>
        <link href="https://blog.xusz.cn/liu-lan-qi-gong-zuo-yuan-li-yu-shi-xian-xue-xi/">
        </link>
        <updated>2019-09-17T08:51:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="tcp协议">TCP协议</h2>
<p>暂缓</p>
<h2 id="http请求流程">HTTP请求流程</h2>
<h3 id="请求流程">请求流程</h3>
<h4 id="dns解析">DNS解析</h4>
<p>获取IP和端口，解析前会查询缓存，这是一个<code>漫长</code>的过程如果匹配到，则中断解析，直接进入下一步。</p>
<h4 id="建立tcp连接">建立TCP连接</h4>
<h4 id="发送http请求">发送HTTP请求</h4>
<p>一旦建立了TCP链接，客户端就可以和服务端通信了。HTTP中的数据，是在这个过程中传输的。</p>
<p>浏览器首先会向服务器发送<code>请求行</code>，它包括了<code>请求方法</code>，<code>请求URI</code>，<code>HTTP版本协议</code>。目的是为了通知浏览器需要请求的资源。常用的方法是<code>Get</code>。</p>
<p>在发送完请求行之后，还要以<code>请求头</code>的形式发送一些其他信息给服务器，比如操作系统，浏览器内核信息，域名信息，cookie等。</p>
<h3 id="响应流程">响应流程</h3>
<p>当服务端收到客户端的请求之后，服务端会根据请求信息进行处理。</p>
<h4 id="响应请求">响应请求</h4>
<p>首先返回响应行，包括协议版本和状态码。</p>
<p>其次，发送响应头。响应头包含了服务端的一些信息，比如返回时间，数据类型以及Cookie等信息。</p>
<p>最后发送响应体，也就是请求的实际内容。</p>
<h4 id="断开连接">断开连接</h4>
<p>通常情况下，当服务端返回了数据，就会关闭TCP连接。如果浏览器或者服务器的头信息中有如下：</p>
<pre><code>Connection:Keep-Alive 
</code></pre>
<p>那么请求成功后，不会断开TCP连接，当同一站点内有其他请求的时候，可以使用同一个TCP连接，这样就可以节省建立连接的时间，提升请求响应速度。</p>
<h3 id="缓存">缓存</h3>
<p>第一次打开某个站点的时候，响应的速度可能比较慢。但二次打开就会快一些。这是因为浏览器缓存了一些数据：</p>
<ol>
<li>
<p>DNS缓存</p>
</li>
<li>
<p>静态资源缓存</p>
</li>
</ol>
<p>缓存的的时效性通过在头信息中设置<code>Cache-Control</code>来控制：</p>
<pre><code>Cache-Control:Max-age=60000
</code></pre>
<p>如果资源的没有过期，那么直接从缓存中读取；如果已经过期，则发起请求，并在请求头中带上：</p>
<pre><code>If-None-Match:&quot;4f80f-13c-3a1xb12a&quot;
</code></pre>
<p>服务器收到请求后，会根据<code>If-None-Match</code>来判断请求的资源有没有被更新，如果更新了，则直接返回最新的资源，如果没有更新，则返回304状态码，告诉浏览器，缓存资源可以继续使用。</p>
<h3 id="总结">总结</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello React （Vol.1）]]></title>
        <id>https://blog.xusz.cn/hr/</id>
        <link href="https://blog.xusz.cn/hr/">
        </link>
        <updated>2019-08-13T08:11:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="介绍">介绍</h3>
<p>前端js框架，使用jsx快速构建用户界面。</p>
<ul>
<li>声明式</li>
<li>组件化</li>
<li>一次学习，随处编写</li>
</ul>
<h3 id="初试">初试</h3>
<p>通过script标签直接引入<code>react</code> <code>react-dom</code> <code>babel</code>，直接在浏览器中体验react。</p>
<pre><code>&lt;script src=&quot;https://cdn.bootcss.com/react/16.9.0-rc.0/umd/react.development.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.bootcss.com/react-dom/16.9.0-alpha.0/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.bootcss.com/babel-standalone/7.0.0-beta.3/babel.js&quot;&gt;&lt;/script&gt;
</code></pre>
<pre><code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;

&lt;script type=&quot;text/babel&quot;&gt;
	ReactDOM.render(
		&lt;h1&gt;Hello React&lt;/h1&gt;, 
		document.getElementById('app')
	)
&lt;/script&gt;
</code></pre>
<p>这里script的type属性必须是text/babel，然后会被编译成如下：</p>
<pre><code>&quot;use strict&quot;;
ReactDOM.render(React.createElement(&quot;h1&quot;, null, &quot;Hello React&quot;), document.getElementById('app'));
</code></pre>
<p>这里ReactDOM的render方法接收2个参数，第一个参数是ReactElement的实例，第二个是挂载的容器。这里不展开，详细的以后再学习。</p>
<h3 id="create-react-app">create-react-app</h3>
<h4 id="安装">安装</h4>
<p><code>npm install -g create-react-app</code></p>
<h4 id="创建项目">创建项目</h4>
<pre><code>create-react-app my-app
cd my-app
yarn start
</code></pre>
<p>没什么意外的话，可以很轻松的就跑起来了~</p>
<h3 id="一个组件">一个组件</h3>
<p>index.js -- 应用入口</p>
<pre><code>import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));
</code></pre>
<p>app.js</p>
<pre><code>import React from 'react';

function App() {
  return (
    &lt;div className=&quot;App&quot;&gt;
      &lt;h1&gt;Welcome!&lt;/h1&gt;
    &lt;/div&gt;
  );
}

export default App;
</code></pre>
<h3 id="多个组件">多个组件</h3>
<p>多个小组件，组合成一个更加复杂的组件。<br>
app.js</p>
<pre><code>...

// Header组件
const Header = ( props ) =&gt; ( &lt;h3&gt;Header, {props.name}&lt;/h3&gt; )

// Content组件
const Content = ( ) =&gt; ( &lt;h3&gt;Content&lt;/h3&gt; )

// Footer组件
const Footer = ( ) =&gt; ( &lt;h3&gt;Footer&lt;/h3&gt; )

function App() {
 return (
	&lt;div className=&quot;App&quot;&gt;
		&lt;h1&gt;Welcome!&lt;/h1&gt;
		&lt;Header  name='Wrap' /&gt;
		&lt;Content /&gt;
		&lt;Footer /&gt;
	&lt;/div&gt;
 );
}

...
</code></pre>
<h3 id="表达式">表达式</h3>
<h4 id="计算">计算</h4>
<pre><code>&lt;div&gt;{ 1 + 1 }&lt;/div&gt;
</code></pre>
<h4 id="字符串">字符串</h4>
<pre><code>&lt;div&gt;{ 'hello world' }&lt;/div&gt;
</code></pre>
<h4 id="三元运算">三元运算</h4>
<pre><code>&lt;div&gt;{ flag ? 'True' : 'False'  }&lt;/div&gt;
</code></pre>
<h4 id="数组">数组</h4>
<pre><code>const arr = [0, 1, true, false, ]
&lt;div&gt;{ arr }&lt;/div&gt;

&lt;div&gt;
 {
  arr.map((item, index) =&gt; {
		&lt;li&gt;{item}&lt;/li&gt;
	})
 }
&lt;/div&gt;
</code></pre>
<h3 id="数据传递">数据传递</h3>
<p>react是单向数据流的，数据只能自上而下的传递</p>
<h4 id="父组件传递到子组件">父组件传递到子组件</h4>
<pre><code>import React, {Component} from 'react';

const ChildComponent = (props) =&gt; {
	return (
		&lt;div&gt;Name is : {props.name}，Age is {props.age}
		 {
		  props.colors.map((color, index) =&gt; &lt;li key={index}&gt;{color}&lt;/li&gt;)
		 }
		&lt;/div&gt;
	)
}

class App extends Component {
 render() {
  const user = {
   name: 'Bill',
	 age: 12,
	 colors: ['red', 'blue', 'yellow']
  }
  return (
	 &lt;div classNames='container'&gt;
		 &lt;ChildComponent name={user.name} age={user.age} colors={user.colors}  /&gt;
	 &lt;/div&gt;
  )
 }
}
</code></pre>
<h4 id="子组件传递到父组件">子组件传递到父组件</h4>
<p>父组件传给子组件自定义函数</p>
<pre><code>class ParentComponent extends React.Component {
 constructor(props){
  super(props)
  this.state = {
	 name: ''
	}
 }
 
 handleChange = (e) =&gt; {
   this.setState({
    name: e.target.value
   })
 }
	
 render(){
  return (
	 &lt;div&gt;
	  &lt;h3&gt;You name is : {this.state.name}&lt;/h3&gt;
		&lt;Child updateName={this.handleChange} /&gt;
	 &lt;/div&gt;
	)
 }
}
</code></pre>
<p>子组件通过调用父组件传过来的函数，把数据返回给父组件</p>
<pre><code>const Child = (props) =&gt; {
 return (
  &lt;input
	 type=&quot;text&quot; 
   onChange={props.updateName} 
   placeholder='Please input you name'
  /&gt;
 )
}
</code></pre>
<h4 id="兄弟组件通信">兄弟组件通信</h4>
<p>兄弟组件通信太烦了<sub>割了</sub>以后学习context和redux吧</p>
<h3 id="数据类型检查">数据类型检查</h3>
<p>采用<code>prop-types</code>对数据进行类型验证，可以确保数据的准确性，快速定位存在的问题，防止因隐式转换带来的一些问题等。</p>
<pre><code>import PropTypes from 'prop-types';

...
ChildComponent.propTypes = {
 name: PropTypes.string,
 age: PropTypes.number，
 colors: PropTypes.array
}
...
</code></pre>
<h3 id="click事件">Click事件</h3>
<pre><code>class App extends Component {
 constructor(){
	this.state = {
	 age: 1
	}
 }
 
 add(){
  this.setState({
	 age: this.state.age + 1
	})
 }
 
 render() {
  return (
	 &lt;div classNames='container'&gt;
		 &lt;button onClick={ () =&gt; {this.add()} } &gt;{this.state.age}&lt;/button&gt;
	 &lt;/div&gt;
  )
 }
}
</code></pre>
<h3 id="无状态组件">无状态组件</h3>
<p>相同的输入，总会有相同的输出。组件的输出结果完全由props决定，且没有任何副作用</p>
<pre><code>const ChildComponent = (props) =&gt; {
	return (
		&lt;div&gt;
		 {
		  props.colors.map((color, index) =&gt; &lt;li key={index}&gt;{color}&lt;/li&gt;)
		 }
		&lt;/div&gt;
	)
}
</code></pre>
]]></content>
    </entry>
</feed>